/// @generated by the sqlc-gen-rust on sqlc-generate using sqlc.yaml
/// DO NOT EDIT.
pub(crate) const DELETE_BOOK: &str = r#"
delete from books
where book_id = $1
"#;
#[derive(postgres_derive::ToSql, postgres_derive::FromSql)]
#[postgres(name = "book_type")]
pub enum BookType {
    #[postgres(name = "FICTION")]
    Fiction,
    #[postgres(name = "NONFICTION")]
    Nonfiction,
}
#[derive(sqlc_core::FromPostgresRow)]
pub(crate) struct Author {
    pub author_id: i32,
    pub name: String,
    pub biography: Option<serde_json::Value>,
}
#[derive(sqlc_core::FromPostgresRow)]
pub(crate) struct Book {
    pub book_id: i32,
    pub author_id: i32,
    pub isbn: String,
    pub book_type: BookType,
    pub title: String,
    pub year: i32,
    pub available: time::OffsetDateTime,
    pub tags: Vec<String>,
}
pub(crate) async fn delete_book<'a, C, I>(
    client: &'a C,
    book_id_list: I,
) -> sqlc_core::Result<
    impl futures::Stream<
        Item = impl futures::Future<Output = sqlc_core::Result<()>> + 'a,
    > + 'a,
>
where
    C: sqlc_core::DBTX,
    I: IntoIterator + 'a,
    I::Item: std::borrow::Borrow<i32> + 'a,
{
    let stmt = client.prepare(DELETE_BOOK).await?;
    let fut = move |item: <I as IntoIterator>::Item| {
        let stmt = stmt.clone();
        Box::pin(async move {
            use std::borrow::Borrow;
            let book_id = item.borrow();
            client.execute(&stmt, &[&book_id]).await?;
            Ok(())
        })
    };
    Ok(futures::stream::iter(book_id_list.into_iter().map(fut)))
}
